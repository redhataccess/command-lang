PARSER_BEGIN(Basic)

package com.redhat.commandlang.basic;

import java.io.Reader;
import java.io.StringReader;

public class Basic {
    /**
     *
     * Default constructor.
     *
     */
    public Basic() {
        this(new StringReader( ""));
    }

    public void parse(final Reader reader) throws Exception {
        final StringBuilder sb = new StringBuilder();

        try {
			ReInit(reader);
			parse(sb);

            System.out.println(sb.toString());
        } catch(final Exception exception) {
            exception.printStackTrace();
            throw new RuntimeException(exception);
        }
    }
}

PARSER_END(Basic)

TOKEN:
{

        <#CR:                ("\n")>
        |
        <#LF:                ("\r")>
        |
        <#DOUBLE_QUOTE:      ("\"")>
        |
        <#TWO_DOUBLE_QUOTES: (<DOUBLE_QUOTE> <DOUBLE_QUOTE>)>
        |
        <#TEXT:              (~["\"", "\n", "\r", ","])> 
        |
        <#QUOTED_FIELD:       (([" ", "\t"])* <DOUBLE_QUOTE> ( [ " ", "!", "#" - "~", "\n", "\r", "\t" ] | <TWO_DOUBLE_QUOTES> )* <DOUBLE_QUOTE>)>
        |
        <LET:                ("let ")> : LET_TOKEN
        |
        <PRINT:              ("print ")> : PRINT_TOKEN
        |
        <EOL:              (<CR> | <CR> <LF>)>
}

<LET_TOKEN> TOKEN:
{
        <NON_QUOTED_FIELD:   (<TEXT>)+>         |
        <LET_VALUE_TOKEN:    (<QUOTED_FIELD>)>  |
        <LET_CR:          (<CR>)>: DEFAULT
}

<PRINT_TOKEN> TOKEN:
{
        <PRINTED_QUOTED_FIELD:  (([" ", "\t"])* <DOUBLE_QUOTE> ( [ " ", "!", "#" - "~", "\n", "\r", "\t" ] | <TWO_DOUBLE_QUOTES> )* <DOUBLE_QUOTE>)> |
        <PRINT_CR:         (<CR>)>: DEFAULT
}


protected void parse(final StringBuilder builder) throws Exception:
{
    Token eolToken;
    Token eofToken;
    Token commaToken;

    int maxFields  = -1;
    int fieldCount =  0;

    System.out.println("Parsing begins");

    builder.append("---\n");
}

{
    (processLine(builder))+ <EOF>
}


void processLine(final StringBuilder builder) throws Exception:
{
    Token nameToken;
    Token quotedToken;
}

{
    <LET> {
        System.out.println("Hit LET");
    }

    nameToken = <NON_QUOTED_FIELD> {
        System.out.println("LET -> Hit name [" + nameToken.image + "]");
    }

    quotedToken = <LET_VALUE_TOKEN>
    {
        builder.append("- ").append("var:\n").append("    ").append(nameToken).append(": ").append(quotedToken.image).append("\n");

        System.out.println("LET -> Hit value [" + quotedToken.image + "]");
    }

    <LET_CR>

    | 

    <PRINT> {
        System.out.println("Hit PRINT");
    }

    quotedToken = <PRINTED_QUOTED_FIELD>
    {
        builder.append("- ").append("log:\n").append("    msg: ").append(quotedToken).append("\n");

        System.out.println("PRINT -> Hit value [" + quotedToken.image + "]");
    }

    <PRINT_CR>
}

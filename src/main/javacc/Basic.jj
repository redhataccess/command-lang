PARSER_BEGIN(Basic)

package com.redhat.lang.basic;

import java.io.Reader;
import java.io.StringReader;

public class Basic {
    /**
     *
     * Default constructor.
     *
     */
    public Basic() {
        this(new StringReader( ""));
    }

    public void parse(final Reader reader, final Builder builder) throws Exception {
        final StringBuilder sb = new StringBuilder();

        try {
            ReInit(reader);
            parse(sb, builder);

            System.out.println(sb.toString());
        } catch(final Exception exception) {
            exception.printStackTrace();
            throw new RuntimeException(exception);
        }
    }
}

PARSER_END(Basic)


TOKEN:
{

        <#CR:                ("\n")>
        |
        <#LF:                ("\r")>
        |
        <#DOUBLE_QUOTE:      ("\"")>
        |
        <#TWO_DOUBLE_QUOTES: (<DOUBLE_QUOTE> <DOUBLE_QUOTE>)>
        |
        <#TEXT:              (~["\"", "\n", "\r", ",", "{", "}"])> 
        |
        <#LCURLY:            ("{")>
        |
        <#RCURLY:            ("}")>
        |
        <#QUOTED_FIELD:      (([" ", "\t"])* <DOUBLE_QUOTE> ( [ " ", "!", "#" - "~", "\n", "\r", "\t" ] | <TWO_DOUBLE_QUOTES> )* <DOUBLE_QUOTE>)>
        |
        <OBJECT:             ("object")> : OBJECT
        |
        <METHOD:             ("method")> : METHOD
        |
        <EOL:                (<CR> | <CR> <LF>)>
}

protected void parse(final StringBuilder sb, final Builder builder) throws Exception:
{
    Token eolToken;
    Token eofToken;

    System.out.println("Parsing begins");

    sb.append("---\n");
}

{
    (
        object(sb, builder)
    )
}

// -----------------------------------------------------------------------------------------------------

<OBJECT> SKIP:
{
    "\t" | "\n" | "\r" | " "
}

<OBJECT> TOKEN:
{
    <NAME:          (<TEXT>)+>
    |
    <OBJECT_START:  (<LCURLY>)>
    |
    <OBJECT_END:    (<RCURLY>)> : DEFAULT
}

void object(final StringBuilder sb, final Builder builder) throws Exception:
{
    Token name;
    Token rightCurly;

    System.out.println("Processing object!");
}

{
    <OBJECT> name = <NAME> <OBJECT_START>
    {
        builder.objectStart(name.image, name.beginLine, name.endLine);
    }

            
    objectDef(sb, builder)

    rightCurly = <OBJECT_END>
    {
        builder.objectEnd(name.image, rightCurly.beginLine, rightCurly.endLine);
    }
}

// -----------------------------------------------------------------------------------------------------

void objectDef(final StringBuidler sb, final Builder builder) throws Exception:
{
    Token name;
    Token rightCurly;
}

{
    (
        method(sb, builder)
    )
}

// -----------------------------------------------------------------------------------------------------

<METHOD> TOKEN:
{
    <METHOD:        ("method")>
    |
    <NAME:          (<TEXT>)+>
    |
    <METHOD_START:  (<LCURLY>)> : METHOD
    |
    <METHOD_END:    (<RCURLY>)> : OBJECT
}

void method(final StringBuidler sb, final Builder builder) throws Exception:
{
    Token name;
    Token rightCurly;
}

{
    <METHOD> name=<NAME> <METHOD_START>
    {
        builder.methodStart(name.image, name.beginLine, name.endLine);
    }

    rightCurly=<METHOD_END>
    {
        builder.methodEnd(name.image, rightCurly.beginLine, rightCurly.endLine);
    }
}

// -----------------------------------------------------------------------------------------------------


<LET_STATE> TOKEN:
{
        <NON_QUOTED_FIELD:   (<TEXT>)+>         |
        <LET_VALUE_TOKEN:    (<QUOTED_FIELD>)>  |
        <LET_CR:             (<CR>)>: DEFAULT
}

<PRINT_STATE> TOKEN:
{
        <PRINTED_QUOTED_FIELD:  (([" ", "\t"])* <DOUBLE_QUOTE> ( [ " ", "!", "#" - "~", "\n", "\r", "\t" ] | <TWO_DOUBLE_QUOTES> )* <DOUBLE_QUOTE>)> |
        <PRINT_CR:         (<CR>)>: DEFAULT
}